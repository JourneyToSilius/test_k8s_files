apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    meta.helm.sh/release-name: minio-test
    meta.helm.sh/release-namespace: monit
  creationTimestamp: "2021-01-13T15:32:35Z"
  generation: 1
  labels:
    app.kubernetes.io/instance: minio-test
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-4.1.13
  managedFields:
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:meta.helm.sh/release-name: {}
          f:meta.helm.sh/release-namespace: {}
        f:labels:
          .: {}
          f:app.kubernetes.io/instance: {}
          f:app.kubernetes.io/managed-by: {}
          f:app.kubernetes.io/name: {}
          f:helm.sh/chart: {}
      f:spec:
        f:podManagementPolicy: {}
        f:replicas: {}
        f:revisionHistoryLimit: {}
        f:selector: {}
        f:serviceName: {}
        f:template:
          f:metadata:
            f:annotations:
              .: {}
              f:checksum/credentials-secret: {}
            f:labels:
              .: {}
              f:app.kubernetes.io/instance: {}
              f:app.kubernetes.io/managed-by: {}
              f:app.kubernetes.io/name: {}
              f:helm.sh/chart: {}
          f:spec:
            f:affinity:
              .: {}
              f:podAntiAffinity:
                .: {}
                f:preferredDuringSchedulingIgnoredDuringExecution: {}
            f:containers:
              k:{"name":"minio"}:
                .: {}
                f:env:
                  .: {}
                  k:{"name":"BITNAMI_DEBUG"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"MINIO_ACCESS_KEY"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      .: {}
                      f:secretKeyRef:
                        .: {}
                        f:key: {}
                        f:name: {}
                  k:{"name":"MINIO_BROWSER"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"MINIO_DISTRIBUTED_MODE_ENABLED"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"MINIO_DISTRIBUTED_NODES"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"MINIO_FORCE_NEW_KEYS"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"MINIO_PROMETHEUS_AUTH_TYPE"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"MINIO_SECRET_KEY"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      .: {}
                      f:secretKeyRef:
                        .: {}
                        f:key: {}
                        f:name: {}
                  k:{"name":"MINIO_SKIP_CLIENT"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:livenessProbe:
                  .: {}
                  f:failureThreshold: {}
                  f:httpGet:
                    .: {}
                    f:path: {}
                    f:port: {}
                    f:scheme: {}
                  f:initialDelaySeconds: {}
                  f:periodSeconds: {}
                  f:successThreshold: {}
                  f:timeoutSeconds: {}
                f:name: {}
                f:ports:
                  .: {}
                  k:{"containerPort":9000,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:name: {}
                    f:protocol: {}
                f:readinessProbe:
                  .: {}
                  f:failureThreshold: {}
                  f:initialDelaySeconds: {}
                  f:periodSeconds: {}
                  f:successThreshold: {}
                  f:tcpSocket:
                    .: {}
                    f:port: {}
                  f:timeoutSeconds: {}
                f:resources: {}
                f:securityContext:
                  .: {}
                  f:runAsUser: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
                f:volumeMounts:
                  .: {}
                  k:{"mountPath":"/minio-pv-claim"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
            f:dnsPolicy: {}
            f:restartPolicy: {}
            f:schedulerName: {}
            f:securityContext:
              .: {}
              f:fsGroup: {}
            f:serviceAccount: {}
            f:serviceAccountName: {}
            f:terminationGracePeriodSeconds: {}
        f:updateStrategy:
          f:type: {}
        f:volumeClaimTemplates: {}
    manager: Go-http-client
    operation: Update
    time: "2021-01-13T15:32:35Z"
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:collisionCount: {}
        f:currentReplicas: {}
        f:currentRevision: {}
        f:observedGeneration: {}
        f:replicas: {}
        f:updateRevision: {}
        f:updatedReplicas: {}
    manager: kube-controller-manager
    operation: Update
    time: "2021-01-13T15:32:35Z"
  name: minio-test
  namespace: monit
  resourceVersion: "44070"
  uid: 8e42379b-5e24-4845-a287-f446c87cb853
spec:
  podManagementPolicy: Parallel
  replicas: 4
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: minio-test
      app.kubernetes.io/name: minio
  serviceName: minio-test-headless
  template:
    metadata:
      annotations:
        checksum/credentials-secret: c8e4b7ded481243154d63cf7481ada66e227bf88493928b79c810ac2b6e94a49
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: minio-test
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: minio
        helm.sh/chart: minio-4.1.13
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: minio-test
                  app.kubernetes.io/name: minio
              namespaces:
              - monit
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: MINIO_DISTRIBUTED_MODE_ENABLED
          value: "yes"
        - name: MINIO_SKIP_CLIENT
          value: "yes"
        - name: MINIO_DISTRIBUTED_NODES
          value: minio-test-0.minio-test-headless.monit.svc.cluster.local,minio-test-1.minio-test-headless.monit.svc.cluster.local,minio-test-2.minio-test-headless.monit.svc.cluster.local,minio-test-3.minio-test-headless.monit.svc.cluster.local,
        - name: MINIO_FORCE_NEW_KEYS
          value: "no"
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: access-key
              name: minio-test
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: secret-key
              name: minio-test
        - name: MINIO_BROWSER
          value: "on"
        - name: MINIO_PROMETHEUS_AUTH_TYPE
          value: public
        image: docker.io/bitnami/minio:2020.12.29-debian-10-r0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /minio/health/live
            port: minio
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        name: minio
        ports:
        - containerPort: 9000
          name: minio
          protocol: TCP
        readinessProbe:
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          tcpSocket:
            port: minio
          timeoutSeconds: 5
        resources: {}
        securityContext:
          runAsUser: 1001
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /minio-pv-claim
          name: data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1001
      serviceAccount: minio-test
      serviceAccountName: minio-test
      terminationGracePeriodSeconds: 30
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: minio-test
        app.kubernetes.io/name: minio
      name: minio-pv-claim
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: 3Gi
      storageClassName: rook-ceph-block
      volumeMode: Filesystem
    status:
      phase: Pending
status:
  collisionCount: 0
  currentReplicas: 4
  currentRevision: minio-test-86cd95df7d
  observedGeneration: 1
  replicas: 4
  updateRevision: minio-test-86cd95df7d
  updatedReplicas: 4
