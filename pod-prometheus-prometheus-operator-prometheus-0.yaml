apiVersion: v1
kind: Pod
metadata:
  annotations:
    cni.projectcalico.org/podIP: 172.16.140.45/32
    cni.projectcalico.org/podIPs: 172.16.140.45/32
  creationTimestamp: "2021-01-04T16:07:48Z"
  generateName: prometheus-prometheus-operator-prometheus-
  labels:
    app: prometheus
    controller-revision-hash: prometheus-prometheus-operator-prometheus-65d7b6d75c
    prometheus: prometheus-operator-prometheus
    statefulset.kubernetes.io/pod-name: prometheus-prometheus-operator-prometheus-0
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:generateName: {}
        f:labels:
          .: {}
          f:app: {}
          f:controller-revision-hash: {}
          f:prometheus: {}
          f:statefulset.kubernetes.io/pod-name: {}
        f:ownerReferences:
          .: {}
          k:{"uid":"e170bc88-1957-4de6-bdab-eb6e350e382e"}:
            .: {}
            f:apiVersion: {}
            f:blockOwnerDeletion: {}
            f:controller: {}
            f:kind: {}
            f:name: {}
            f:uid: {}
      f:spec:
        f:containers:
          k:{"name":"prometheus"}:
            .: {}
            f:args: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:livenessProbe:
              .: {}
              f:failureThreshold: {}
              f:httpGet:
                .: {}
                f:path: {}
                f:port: {}
                f:scheme: {}
              f:periodSeconds: {}
              f:successThreshold: {}
              f:timeoutSeconds: {}
            f:name: {}
            f:ports:
              .: {}
              k:{"containerPort":9090,"protocol":"TCP"}:
                .: {}
                f:containerPort: {}
                f:name: {}
                f:protocol: {}
            f:readinessProbe:
              .: {}
              f:failureThreshold: {}
              f:httpGet:
                .: {}
                f:path: {}
                f:port: {}
                f:scheme: {}
              f:periodSeconds: {}
              f:successThreshold: {}
              f:timeoutSeconds: {}
            f:resources: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
            f:volumeMounts:
              .: {}
              k:{"mountPath":"/etc/prometheus/certs"}:
                .: {}
                f:mountPath: {}
                f:name: {}
                f:readOnly: {}
              k:{"mountPath":"/etc/prometheus/config_out"}:
                .: {}
                f:mountPath: {}
                f:name: {}
                f:readOnly: {}
              k:{"mountPath":"/etc/prometheus/rules/prometheus-prometheus-operator-prometheus-rulefiles-0"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/prometheus"}:
                .: {}
                f:mountPath: {}
                f:name: {}
                f:subPath: {}
          k:{"name":"prometheus-config-reloader"}:
            .: {}
            f:args: {}
            f:command: {}
            f:env:
              .: {}
              k:{"name":"POD_NAME"}:
                .: {}
                f:name: {}
                f:valueFrom:
                  .: {}
                  f:fieldRef:
                    .: {}
                    f:apiVersion: {}
                    f:fieldPath: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:resources:
              .: {}
              f:limits:
                .: {}
                f:cpu: {}
                f:memory: {}
              f:requests:
                .: {}
                f:cpu: {}
                f:memory: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
            f:volumeMounts:
              .: {}
              k:{"mountPath":"/etc/prometheus/config"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/etc/prometheus/config_out"}:
                .: {}
                f:mountPath: {}
                f:name: {}
          k:{"name":"rules-configmap-reloader"}:
            .: {}
            f:args: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:resources:
              .: {}
              f:limits:
                .: {}
                f:cpu: {}
                f:memory: {}
              f:requests:
                .: {}
                f:cpu: {}
                f:memory: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
            f:volumeMounts:
              .: {}
              k:{"mountPath":"/etc/prometheus/rules/prometheus-prometheus-operator-prometheus-rulefiles-0"}:
                .: {}
                f:mountPath: {}
                f:name: {}
          k:{"name":"thanos-sidecar"}:
            .: {}
            f:args: {}
            f:env:
              .: {}
              k:{"name":"OBJSTORE_CONFIG"}:
                .: {}
                f:name: {}
                f:valueFrom:
                  .: {}
                  f:secretKeyRef:
                    .: {}
                    f:key: {}
                    f:name: {}
              k:{"name":"POD_IP"}:
                .: {}
                f:name: {}
                f:valueFrom:
                  .: {}
                  f:fieldRef:
                    .: {}
                    f:apiVersion: {}
                    f:fieldPath: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:ports:
              .: {}
              k:{"containerPort":10901,"protocol":"TCP"}:
                .: {}
                f:containerPort: {}
                f:name: {}
                f:protocol: {}
              k:{"containerPort":10902,"protocol":"TCP"}:
                .: {}
                f:containerPort: {}
                f:name: {}
                f:protocol: {}
            f:resources: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
            f:volumeMounts:
              .: {}
              k:{"mountPath":"/prometheus"}:
                .: {}
                f:mountPath: {}
                f:name: {}
                f:subPath: {}
        f:dnsPolicy: {}
        f:enableServiceLinks: {}
        f:hostname: {}
        f:restartPolicy: {}
        f:schedulerName: {}
        f:securityContext:
          .: {}
          f:fsGroup: {}
          f:runAsGroup: {}
          f:runAsNonRoot: {}
          f:runAsUser: {}
        f:serviceAccount: {}
        f:serviceAccountName: {}
        f:subdomain: {}
        f:terminationGracePeriodSeconds: {}
        f:volumes:
          .: {}
          k:{"name":"config"}:
            .: {}
            f:name: {}
            f:secret:
              .: {}
              f:defaultMode: {}
              f:secretName: {}
          k:{"name":"config-out"}:
            .: {}
            f:emptyDir: {}
            f:name: {}
          k:{"name":"prometheus-prometheus-operator-prometheus-db"}:
            .: {}
            f:name: {}
            f:persistentVolumeClaim:
              .: {}
              f:claimName: {}
          k:{"name":"prometheus-prometheus-operator-prometheus-rulefiles-0"}:
            .: {}
            f:configMap:
              .: {}
              f:defaultMode: {}
              f:name: {}
            f:name: {}
          k:{"name":"tls-assets"}:
            .: {}
            f:name: {}
            f:secret:
              .: {}
              f:defaultMode: {}
              f:secretName: {}
    manager: kube-controller-manager
    operation: Update
    time: "2021-01-04T16:07:48Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          .: {}
          k:{"type":"PodScheduled"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
    manager: kube-scheduler
    operation: Update
    time: "2021-01-04T16:07:48Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:cni.projectcalico.org/podIP: {}
          f:cni.projectcalico.org/podIPs: {}
    manager: calico
    operation: Update
    time: "2021-01-04T16:08:07Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"ContainersReady"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Initialized"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Ready"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
        f:containerStatuses: {}
        f:hostIP: {}
        f:phase: {}
        f:podIP: {}
        f:podIPs:
          .: {}
          k:{"ip":"172.16.140.45"}:
            .: {}
            f:ip: {}
        f:startTime: {}
    manager: kubelet
    operation: Update
    time: "2021-01-04T16:08:15Z"
  name: prometheus-prometheus-operator-prometheus-0
  namespace: monit
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: StatefulSet
    name: prometheus-prometheus-operator-prometheus
    uid: e170bc88-1957-4de6-bdab-eb6e350e382e
  resourceVersion: "591733"
  uid: 28073912-cde2-4e98-adc1-8cd3ea7a4074
spec:
  containers:
  - args:
    - --web.console.templates=/etc/prometheus/consoles
    - --web.console.libraries=/etc/prometheus/console_libraries
    - --config.file=/etc/prometheus/config_out/prometheus.env.yaml
    - --storage.tsdb.path=/prometheus
    - --storage.tsdb.retention.time=10d
    - --web.enable-lifecycle
    - --storage.tsdb.no-lockfile
    - --web.external-url=http://prometheus-operator-prometheus.monit:9090
    - --web.route-prefix=/
    - --storage.tsdb.max-block-duration=2h
    image: quay.io/prometheus/prometheus:v2.18.2
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 6
      httpGet:
        path: /-/healthy
        port: web
        scheme: HTTP
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 3
    name: prometheus
    ports:
    - containerPort: 9090
      name: web
      protocol: TCP
    readinessProbe:
      failureThreshold: 120
      httpGet:
        path: /-/ready
        port: web
        scheme: HTTP
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 3
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: FallbackToLogsOnError
    volumeMounts:
    - mountPath: /etc/prometheus/config_out
      name: config-out
      readOnly: true
    - mountPath: /etc/prometheus/certs
      name: tls-assets
      readOnly: true
    - mountPath: /prometheus
      name: prometheus-prometheus-operator-prometheus-db
      subPath: prometheus-db
    - mountPath: /etc/prometheus/rules/prometheus-prometheus-operator-prometheus-rulefiles-0
      name: prometheus-prometheus-operator-prometheus-rulefiles-0
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: prometheus-operator-prometheus-token-95rd2
      readOnly: true
  - args:
    - --log-format=logfmt
    - --reload-url=http://127.0.0.1:9090/-/reload
    - --config-file=/etc/prometheus/config/prometheus.yaml.gz
    - --config-envsubst-file=/etc/prometheus/config_out/prometheus.env.yaml
    command:
    - /bin/prometheus-config-reloader
    env:
    - name: POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    image: quay.io/coreos/prometheus-config-reloader:v0.38.1
    imagePullPolicy: IfNotPresent
    name: prometheus-config-reloader
    resources:
      limits:
        cpu: 100m
        memory: 25Mi
      requests:
        cpu: 100m
        memory: 25Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: FallbackToLogsOnError
    volumeMounts:
    - mountPath: /etc/prometheus/config
      name: config
    - mountPath: /etc/prometheus/config_out
      name: config-out
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: prometheus-operator-prometheus-token-95rd2
      readOnly: true
  - args:
    - --webhook-url=http://127.0.0.1:9090/-/reload
    - --volume-dir=/etc/prometheus/rules/prometheus-prometheus-operator-prometheus-rulefiles-0
    image: docker.io/jimmidyson/configmap-reload:v0.3.0
    imagePullPolicy: IfNotPresent
    name: rules-configmap-reloader
    resources:
      limits:
        cpu: 100m
        memory: 25Mi
      requests:
        cpu: 100m
        memory: 25Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: FallbackToLogsOnError
    volumeMounts:
    - mountPath: /etc/prometheus/rules/prometheus-prometheus-operator-prometheus-rulefiles-0
      name: prometheus-prometheus-operator-prometheus-rulefiles-0
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: prometheus-operator-prometheus-token-95rd2
      readOnly: true
  - args:
    - sidecar
    - --prometheus.url=http://127.0.0.1:9090/
    - --tsdb.path=/prometheus
    - --grpc-address=[$(POD_IP)]:10901
    - --http-address=[$(POD_IP)]:10902
    - --objstore.config=$(OBJSTORE_CONFIG)
    - --log.level=info
    - --log.format=logfmt
    env:
    - name: POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: OBJSTORE_CONFIG
      valueFrom:
        secretKeyRef:
          key: thanos.yaml
          name: thanos-objectstorage
    image: quay.io/thanos/thanos:v0.17.0
    imagePullPolicy: IfNotPresent
    name: thanos-sidecar
    ports:
    - containerPort: 10902
      name: http
      protocol: TCP
    - containerPort: 10901
      name: grpc
      protocol: TCP
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: FallbackToLogsOnError
    volumeMounts:
    - mountPath: /prometheus
      name: prometheus-prometheus-operator-prometheus-db
      subPath: prometheus-db
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: prometheus-operator-prometheus-token-95rd2
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  hostname: prometheus-prometheus-operator-prometheus-0
  nodeName: k8s-worker-2
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext:
    fsGroup: 2000
    runAsGroup: 2000
    runAsNonRoot: true
    runAsUser: 1000
  serviceAccount: prometheus-operator-prometheus
  serviceAccountName: prometheus-operator-prometheus
  subdomain: prometheus-operated
  terminationGracePeriodSeconds: 600
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: prometheus-prometheus-operator-prometheus-db
    persistentVolumeClaim:
      claimName: prometheus-prometheus-operator-prometheus-db-prometheus-prometheus-operator-prometheus-0
  - name: config
    secret:
      defaultMode: 420
      secretName: prometheus-prometheus-operator-prometheus
  - name: tls-assets
    secret:
      defaultMode: 420
      secretName: prometheus-prometheus-operator-prometheus-tls-assets
  - emptyDir: {}
    name: config-out
  - configMap:
      defaultMode: 420
      name: prometheus-prometheus-operator-prometheus-rulefiles-0
    name: prometheus-prometheus-operator-prometheus-rulefiles-0
  - name: prometheus-operator-prometheus-token-95rd2
    secret:
      defaultMode: 420
      secretName: prometheus-operator-prometheus-token-95rd2
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2021-01-04T16:07:51Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2021-01-04T16:08:15Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2021-01-04T16:08:15Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2021-01-04T16:07:51Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://9f8b7a7ba048810ea6a2379b33dda44bff55bfaaaa4068b5fd84d28c7e111eab
    image: quay.io/prometheus/prometheus:v2.18.2
    imageID: docker-pullable://quay.io/prometheus/prometheus@sha256:4d3303d1eb424e345cf48969bb7575d4d58472ad783ac41ea07fba92686f7ef5
    lastState:
      terminated:
        containerID: docker://b9134c72027b5a6303ade554e819a1e9a75d7c2d932363cec92af8e9f55feff8
        exitCode: 1
        finishedAt: "2021-01-04T16:08:08Z"
        message: |
          Start listening for connections" address=0.0.0.0:9090
          level=info ts=2021-01-04T16:08:08.110Z caller=head.go:575 component=tsdb msg="Replaying WAL, this may take awhile"
          level=info ts=2021-01-04T16:08:08.113Z caller=head.go:624 component=tsdb msg="WAL segment loaded" segment=0 maxSegment=0
          level=info ts=2021-01-04T16:08:08.113Z caller=head.go:627 component=tsdb msg="WAL replay completed" duration=3.229206ms
          level=info ts=2021-01-04T16:08:08.114Z caller=main.go:694 fs_type=EXT4_SUPER_MAGIC
          level=info ts=2021-01-04T16:08:08.114Z caller=main.go:695 msg="TSDB started"
          level=info ts=2021-01-04T16:08:08.114Z caller=main.go:799 msg="Loading configuration file" filename=/etc/prometheus/config_out/prometheus.env.yaml
          level=info ts=2021-01-04T16:08:08.114Z caller=main.go:547 msg="Stopping scrape discovery manager..."
          level=info ts=2021-01-04T16:08:08.114Z caller=main.go:561 msg="Stopping notify discovery manager..."
          level=info ts=2021-01-04T16:08:08.114Z caller=main.go:583 msg="Stopping scrape manager..."
          level=info ts=2021-01-04T16:08:08.114Z caller=main.go:557 msg="Notify discovery manager stopped"
          level=info ts=2021-01-04T16:08:08.114Z caller=main.go:543 msg="Scrape discovery manager stopped"
          level=info ts=2021-01-04T16:08:08.114Z caller=manager.go:882 component="rule manager" msg="Stopping rule manager..."
          level=info ts=2021-01-04T16:08:08.114Z caller=manager.go:892 component="rule manager" msg="Rule manager stopped"
          level=info ts=2021-01-04T16:08:08.114Z caller=main.go:577 msg="Scrape manager stopped"
          level=info ts=2021-01-04T16:08:08.123Z caller=notifier.go:601 component=notifier msg="Stopping notification manager..."
          level=info ts=2021-01-04T16:08:08.123Z caller=main.go:749 msg="Notifier manager stopped"
          level=error ts=2021-01-04T16:08:08.123Z caller=main.go:758 err="error loading config from \"/etc/prometheus/config_out/prometheus.env.yaml\": couldn't load configuration (--config.file=\"/etc/prometheus/config_out/prometheus.env.yaml\"): open /etc/prometheus/config_out/prometheus.env.yaml: no such file or directory"
        reason: Error
        startedAt: "2021-01-04T16:08:08Z"
    name: prometheus
    ready: true
    restartCount: 1
    started: true
    state:
      running:
        startedAt: "2021-01-04T16:08:10Z"
  - containerID: docker://64fbb5c48d13faf772046b8f17aa90c2109666f844ba9f43a9fedd15cc3cc7fc
    image: quay.io/coreos/prometheus-config-reloader:v0.38.1
    imageID: docker-pullable://quay.io/coreos/prometheus-config-reloader@sha256:d1cce64093d4a850d28726ec3e48403124808f76567b5bd7b26e4416300996a7
    lastState: {}
    name: prometheus-config-reloader
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2021-01-04T16:08:08Z"
  - containerID: docker://3be3ed9be4d1a24fd4cb91ce68da72a0a086ecd0290bcc50de7cd942239b3d78
    image: jimmidyson/configmap-reload:v0.3.0
    imageID: docker-pullable://jimmidyson/configmap-reload@sha256:d107c7a235c266273b1c3502a391fec374430e5625539403d0de797fa9c556a2
    lastState: {}
    name: rules-configmap-reloader
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2021-01-04T16:08:08Z"
  - containerID: docker://0edd91dc1c9accb0b0ec61622a429e0aa9a2494940cfb91615020459ed055d18
    image: quay.io/thanos/thanos:v0.17.0
    imageID: docker-pullable://quay.io/thanos/thanos@sha256:040934b1729ba26e09182db5470c2cea341e1a3d22c2cd5b2e2e86108ed11088
    lastState: {}
    name: thanos-sidecar
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2021-01-04T16:08:08Z"
  hostIP: 192.168.3.102
  phase: Running
  podIP: 172.16.140.45
  podIPs:
  - ip: 172.16.140.45
  qosClass: Burstable
  startTime: "2021-01-04T16:07:51Z"
